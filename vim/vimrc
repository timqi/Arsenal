if get(s:, 'loaded', 0) != 0
    finish
else
    let s:loaded = 1
endif

if has('multi_byte')
    set encoding=utf-8
    set fileencoding=utf-8
    set fileencodings=utf-8,ucs-bom,gbk,gb18030,big5,euc-jp,latin1
endif

let mapleader = "\<space>"

" Basic
syntax on
set nu
set nocompatible
set bs=eol,start,indent
set autoindent
set cindent
set winaltkeys=no
set ttimeout
set ttimeoutlen=50
set ruler
set ignorecase
set smartcase
set hlsearch
set incsearch
set display=lastline
set wildmenu
set lazyredraw
set completeopt=menuone,noselect
set noswapfile
set history=1000
set formatoptions+=m
set formatoptions+=B
set ffs=unix,dos,mac
set errorformat+=[%f:%l]\ ->\ %m,[%f:%l]:%m
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<
set tags=./.tags;,.tags
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,*/.Trash/*
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set smartindent
set expandtab
set nobackup
set nowritebackup

set omnifunc=syntaxcomplete#Complete
autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

au BufNewFile,BufRead,BufReadPost *.md setf markdown
au BufNewFile,BufRead,BufReadPost *.ejs,*.njk setf html
au BufNewFile,BufRead,BufReadPost *.ts setf javascript
autocmd FileType css,less,javascript,html* setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python,php,vim setlocal expandtab shiftwidth=4 softtabstop=4

autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

filetype on
filetype plugin on
filetype plugin indent on

" Keymaps
nnoremap s /
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
inoremap <c-d> <del>
inoremap <c-f> <right>
inoremap <c-b> <left>
cnoremap <c-b> <left>
cnoremap <c-f> <right>
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-d> <del>


call plug#begin('~/.vim/bundle')

Plug 'tpope/vim-vinegar'
let g:netrw_banner = 0
let g:netrw_list_hide= '\./,\.\./'

Plug '907th/vim-auto-save'
let g:auto_save = 1

Plug 'tpope/vim-commentary'

Plug 'jiangmiao/auto-pairs'

Plug 'alvan/vim-closetag'
let g:closetag_filenames = "*.html,*.xhtml,*.njk,*.jsx,*.js,*.php"
let g:closetag_emptyTags_caseSensitive = 1

Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_save_on_switch = 1

Plug 'sbdchd/neoformat'
nnoremap = :Neoformat<CR>
let g:neoformat_run_all_formatters = 1
let g:neoformat_basic_format_retab = 1
let g:neoformat_basic_format_trim = 1

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'ludovicchabant/vim-gutentags'
let g:gutentags_project_root = ['.git', '.hg', '.svn']
let g:gutentags_ctags_tagfile = '.tags'
let g:gutentags_ctags_extra_args = ['--kinds-PHP=cdfit']
let g:gutentags_ctags_extra_args += ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

let g:gutentags_file_list_command = 'rg --ignore-file=.rgignore --files'
let g:gutentags_ctags_exclude = ['*html', '*min.css', '*min.js', '*.json']
let g:gutentags_auto_add_gtags_cscope = 0

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
    let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
    let g:gutentags_modules += ['gtags_cscope']
endif

let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif

Plug 'sheerun/vim-polyglot'

Plug 'vim-test/vim-test'

Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'

Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'

Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '6' }
" noremap <c-t> :BTags<cr>
" noremap <c-p> :Files<cr>
" noremap <c-e> :History<cr>

Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'absolutepath', 'modified' ] ],
    \ },
    \ }

Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
let g:Lf_ShowDevIcons = 0
let g:Lf_ShortcutF = '<c-p>'
noremap <c-p> :Leaderf file<cr>
" let g:Lf_WindowPosition = 'popup'
let g:Lf_RootMarkers = ['.git', '.hg', '.svn']
let g:Lf_WindowHeight = 6
noremap <c-t> :LeaderfBufTag<cr>
noremap <c-e> :LeaderfMruCwd<cr>
noremap <c-r> :LeaderfHistoryCmd<cr>
noremap <leader>o :<C-U>LeaderfRgRecall<CR>
noremap <leader>s :<C-U><C-R>=printf("Leaderf rg --match-path -e ")<CR>
noremap <leader>w :<C-U><C-R>=printf("Leaderf rg --match-path -e %s ", expand("<cword>"))<CR>
let g:Lf_CommandMap = {'<c-k>': ['<c-p>'], '<c-j>': ['<c-n>']}
let g:Lf_WildIgnore = {
    \ 'dir': ['.svn','.git','.hg'],
    \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
    \}
let g:Lf_RgConfig = [
    \ "--max-columns=150",
    \ ]

Plug 'neoclide/coc.nvim', {'branch': 'release'}
set signcolumn=yes
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-N>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction
inoremap <c-space> coc#refresh()
autocmd CursorHold * silent call CocActionAsync('highlight')
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>qf  <Plug>(coc-fix-current)


" coc-snippets
imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-n> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-n>'
let g:coc_snippet_prev = '<c-p>'
imap <C-n> <Plug>(coc-snippets-expand-jump)


call plug#end()

" Styles
if (has("termguicolors"))
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
else
    set t_Co=256
endif
set novb t_vb=
set cursorline
set laststatus=1
set noshowmode
set novisualbell
set t_Co=256
set background=dark
colorscheme gruvbox
hi Normal ctermbg=NONE guibg=NONE
hi SignColumn ctermbg=NONE guibg=NONE
if (has("termguicolors"))
  set termguicolors
endif

"Mode Cursor Settings
" 1 -> blinking block
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar
" 6 -> solid vertical bar
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[3 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode (ELSE)
