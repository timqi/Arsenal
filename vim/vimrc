if get(s:, 'loaded', 0) != 0 | finish | else | let s:loaded = 1 | endif
let mapleader = "\<space>"
if has('multi_byte')
    set encoding=utf-8
    set fileencoding=utf-8
    set fileencodings=utf-8,ucs-bom,gbk,gb18030,big5,euc-jp,latin1
endif


" Basic
syntax on
set nu
set nocompatible
set bs=eol,start,indent
set winaltkeys=no
set ttimeout
set ttimeoutlen=50
set ruler
set ignorecase
set smartcase
set hlsearch
set incsearch
set display=lastline
set wildmenu
set lazyredraw
set completeopt=menuone,noselect
set noswapfile
set history=1000
set formatoptions+=m
set formatoptions+=B
set ffs=unix,dos,mac
set errorformat+=[%f:%l]\ ->\ %m,[%f:%l]:%m
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<
set tags=./.tags;,.tags
set wildignore+=.bak,*.swp,*.class,*.pyc,*DS_Store*,*.swp,*/.Trash/*
set omnifunc=syntaxcomplete#Complete
set nobackup
set nowritebackup
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set cindent
set autoindent
set smartindent
set expandtab

au FileType go setlocal noexpandtab
au FileType css,less,javascript,html* setlocal shiftwidth=2 tabstop=2 softtabstop=2
au FileType python,php,vim setlocal expandtab shiftwidth=4 softtabstop=4

autocmd InsertEnter * let save_cwd = getcwd() | set autochdir
autocmd InsertLeave * set noautochdir | execute 'cd' fnameescape(save_cwd)

au BufNewFile,BufRead,BufReadPost *.md setf markdown
au BufNewFile,BufRead,BufReadPost *.ejs,*.njk setf html
au BufNewFile,BufRead,BufReadPost *.ts setf javascript

" autocmd BufReadPost *
"      \ if line("'\"") > 0 && line("'\"") <= line("$") |
"      \   exe "normal! g`\"" |
"      \ endif

filetype on
filetype plugin on
filetype plugin indent on

" Keymaps
nnoremap s /
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
inoremap <c-d> <del>
inoremap <c-f> <right>
inoremap <c-b> <left>
cnoremap <c-b> <left>
cnoremap <c-f> <right>
cnoremap <c-a> <home>
cnoremap <c-e> <end>
cnoremap <c-d> <del>


call plug#begin('~/.vim/bundle')

Plug 'tpope/vim-vinegar'
let g:netrw_banner = 0
let g:netrw_list_hide= '\./,\.\./'

Plug '907th/vim-auto-save'
let g:auto_save = 1

Plug 'tpope/vim-commentary'

Plug 'jiangmiao/auto-pairs'

Plug 'alvan/vim-closetag'
let g:closetag_filenames = "*.html,*.xhtml,*.njk,*.jsx,*.js,*.php"
let g:closetag_emptyTags_caseSensitive = 1

Plug 'christoomey/vim-tmux-navigator'
let g:tmux_navigator_save_on_switch = 1

Plug 'sbdchd/neoformat'
nnoremap = :Neoformat<CR>
let g:neoformat_run_all_formatters = 1
let g:neoformat_basic_format_retab = 1
let g:neoformat_basic_format_trim = 1

Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'ludovicchabant/vim-gutentags'
let g:gutentags_project_root = ['.git', '.hg', '.svn']
let g:gutentags_ctags_tagfile = '.tags'
let g:gutentags_ctags_extra_args = ['--kinds-PHP=cdfit']
let g:gutentags_ctags_extra_args += ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']
let g:gutentags_file_list_command = 'find . -name "*"'
let g:gutentags_ctags_exclude = ['*html', '*min.css', '*min.js', '*.json']
let g:gutentags_auto_add_gtags_cscope = 0
" let g:gutentags_file_list_command = 'rg --ignore-file=.rgignore --files'

let s:vim_tags = expand('~/.config/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags) | silent! call mkdir(s:vim_tags, 'p') | endif
" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags') | let g:gutentags_modules += ['ctags'] | endif
if executable('gtags-cscope') && executable('gtags') | let g:gutentags_modules += ['gtags_cscope'] | endif

Plug 'sheerun/vim-polyglot'

Plug 'vim-test/vim-test'

Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'

Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '6' }
" noremap <c-t> :BTags<cr>
" noremap <c-p> :Files<cr>
" noremap <c-e> :History<cr>

Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [['mode', 'paste'], ['readonly', 'absolutepath', 'modified']],
    \ },}

Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
noremap <c-t> :LeaderfBufTag<CR>
noremap <c-e> :LeaderfMruCwd<CR>
noremap q: :<C-U>LeaderfHistoryCmd<CR>
noremap q/ :<C-U>LeaderfHistorySearch<CR>
cnoremap <C-r> <C-u>:LeaderfHistoryCmd<CR>
noremap <leader>o :<C-U>LeaderfRgRecall<CR>
noremap <leader>s :<C-U><C-R>=printf("Leaderf rg --match-path -e ")<CR>
noremap <leader>w :<C-U><C-R>=printf("Leaderf rg --match-path -e %s ", expand("<cword>"))<CR>
let s:lf_cache = expand('~/.config/LfCache')
let g:Lf_CacheDirectory = s:lf_cache
let g:Lf_ShowDevIcons = 0
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_RootMarkers = [".git", ".hg", ".svn"]
let g:Lf_WindowHeight = 6
let g:Lf_DefaultExternalTool = "rg"
let g:Lf_RgConfig = ["--max-columns=200", ]
let g:Lf_UseVersionControlTool = 0
let g:Lf_CommandMap = {'<c-k>': ['<c-p>'], '<c-j>': ['<c-n>']}
let g:Lf_WildIgnore = {
    \ 'dir': ['.svn','.git','.hg'],
    \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
    \}


Plug 'neoclide/coc.nvim', {'branch': 'release'}
nmap g[ <Plug>(coc-diagnostic-prev)
nmap g] <Plug>(coc-diagnostic-next)
nnoremap fc :<C-u>call CocActionAsync('doQuickfix')<CR>
nnoremap gd :<C-u>call CocActionAsync('jumpDefinition')<CR>
nnoremap ge :<C-u>call CocActionAsync('jumpDeclaration')<CR>
nnoremap gi :<C-u>call CocActionAsync('jumpImplementation')<CR>
nnoremap gt :<C-u>call CocActionAsync('jumpTypeDefinition')<CR>
nnoremap gr :<C-u>call CocActionAsync('jumpReferences')<CR>
nnoremap K  :<C-u>call CocAction('doHover')<CR>
inoremap <silent><expr> <Nul> coc#refresh()
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>qf  <Plug>(coc-fix-current)
autocmd CursorHold * silent call CocActionAsync('highlight')

" coc-snippets
imap <C-l> <Plug>(coc-snippets-expand)
vmap <C-n> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-l>'
let g:coc_snippet_prev = '<c-;>'
imap <C-n> <Plug>(coc-snippets-expand-jump)

if has("patch-8.1.1564") | set signcolumn=number | else | set signcolumn=yes | endif
let g:coc_global_extensions = [
    \ "coc-tsserver",
    \ "coc-python",
    \ "coc-word",
    \ "coc-tag",
    \ "coc-snippets",
    \ "coc-go",
    \ ]

call plug#end()

" Styles
set laststatus=1
set t_Co=256
set novb t_vb=
set cursorline
set noshowmode
set novisualbell
set background=dark
colorscheme gruvbox
hi Normal ctermbg=NONE guibg=NONE
hi SignColumn ctermbg=NONE guibg=NONE
